

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Mar 17 14:45:24 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1509
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F1509 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  0111                     	;# 
   104  0112                     	;# 
   105  0113                     	;# 
   106  0114                     	;# 
   107  0115                     	;# 
   108  0116                     	;# 
   109  0117                     	;# 
   110  0118                     	;# 
   111  0119                     	;# 
   112  011D                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  018E                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0194                     	;# 
   122  0195                     	;# 
   123  0196                     	;# 
   124  0197                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019C                     	;# 
   130  019D                     	;# 
   131  019E                     	;# 
   132  019F                     	;# 
   133  020C                     	;# 
   134  020D                     	;# 
   135  0211                     	;# 
   136  0211                     	;# 
   137  0212                     	;# 
   138  0212                     	;# 
   139  0213                     	;# 
   140  0213                     	;# 
   141  0214                     	;# 
   142  0214                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0216                     	;# 
   147  0216                     	;# 
   148  0217                     	;# 
   149  0217                     	;# 
   150  0391                     	;# 
   151  0392                     	;# 
   152  0393                     	;# 
   153  0394                     	;# 
   154  0395                     	;# 
   155  0396                     	;# 
   156  0498                     	;# 
   157  0498                     	;# 
   158  0499                     	;# 
   159  049A                     	;# 
   160  049B                     	;# 
   161  049B                     	;# 
   162  049C                     	;# 
   163  049D                     	;# 
   164  049E                     	;# 
   165  049F                     	;# 
   166  0611                     	;# 
   167  0612                     	;# 
   168  0613                     	;# 
   169  0613                     	;# 
   170  0614                     	;# 
   171  0615                     	;# 
   172  0616                     	;# 
   173  0616                     	;# 
   174  0617                     	;# 
   175  0618                     	;# 
   176  0619                     	;# 
   177  0619                     	;# 
   178  061A                     	;# 
   179  061B                     	;# 
   180  061C                     	;# 
   181  061C                     	;# 
   182  0691                     	;# 
   183  0692                     	;# 
   184  0693                     	;# 
   185  0694                     	;# 
   186  0695                     	;# 
   187  0F0F                     	;# 
   188  0F10                     	;# 
   189  0F11                     	;# 
   190  0F12                     	;# 
   191  0F13                     	;# 
   192  0F14                     	;# 
   193  0F15                     	;# 
   194  0F16                     	;# 
   195  0F17                     	;# 
   196  0F18                     	;# 
   197  0F19                     	;# 
   198  0F1A                     	;# 
   199  0F1B                     	;# 
   200  0F1C                     	;# 
   201  0F1D                     	;# 
   202  0F1E                     	;# 
   203  0F1F                     	;# 
   204  0F20                     	;# 
   205  0F21                     	;# 
   206  0F22                     	;# 
   207  0F23                     	;# 
   208  0F24                     	;# 
   209  0F25                     	;# 
   210  0F26                     	;# 
   211  0F27                     	;# 
   212  0F28                     	;# 
   213  0F29                     	;# 
   214  0F2A                     	;# 
   215  0F2B                     	;# 
   216  0F2C                     	;# 
   217  0F2D                     	;# 
   218  0F2E                     	;# 
   219  0F2F                     	;# 
   220  0F8C                     	;# 
   221  0F8D                     	;# 
   222  0F91                     	;# 
   223  0F95                     	;# 
   224  0F96                     	;# 
   225  0F97                     	;# 
   226  0F9C                     	;# 
   227  0F9D                     	;# 
   228  0F9E                     	;# 
   229  0FE3                     	;# 
   230  0FE4                     	;# 
   231  0FE5                     	;# 
   232  0FE6                     	;# 
   233  0FE7                     	;# 
   234  0FE8                     	;# 
   235  0FE9                     	;# 
   236  0FEA                     	;# 
   237  0FEB                     	;# 
   238  0FED                     	;# 
   239  0FEE                     	;# 
   240  0FEF                     	;# 
   241  008E                     _TRISCbits	set	142
   242  010E                     _LATCbits	set	270
   243                           
   244                           	psect	cinit
   245  07FD                     start_initialization:	
   246                           ; #config settings
   247                           
   248  07FD                     __initialization:
   249  07FD                     end_of_initialization:	
   250                           ;End of C runtime variable initialization code
   251                           
   252  07FD                     __end_of__initialization:
   253  07FD  0020               	movlb	0
   254  07FE  3186  2E66         	ljmp	_main	;jump to C main() function
   255                           
   256                           	psect	cstackCOMMON
   257  0070                     __pcstackCOMMON:
   258  0070                     ?_clk_pulse:
   259  0070                     ?_latch_pulse:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_main:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?___awdiv:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?___awmod:	
   269                           ; 2 bytes @ 0x0
   270                           
   271  0070                     clk_pulse@n:	
   272                           ; 2 bytes @ 0x0
   273                           
   274  0070                     latch_pulse@n:	
   275                           ; 2 bytes @ 0x0
   276                           
   277  0070                     ___awdiv@divisor:	
   278                           ; 2 bytes @ 0x0
   279                           
   280  0070                     ___awmod@divisor:	
   281                           ; 2 bytes @ 0x0
   282                           
   283                           
   284                           ; 2 bytes @ 0x0
   285  0070                     	ds	2
   286  0072                     ??_clk_pulse:
   287  0072                     ??_latch_pulse:	
   288                           ; 1 bytes @ 0x2
   289                           
   290  0072                     clk_pulse@i:	
   291                           ; 1 bytes @ 0x2
   292                           
   293  0072                     latch_pulse@i:	
   294                           ; 2 bytes @ 0x2
   295                           
   296  0072                     ___awdiv@dividend:	
   297                           ; 2 bytes @ 0x2
   298                           
   299  0072                     ___awmod@dividend:	
   300                           ; 2 bytes @ 0x2
   301                           
   302                           
   303                           ; 2 bytes @ 0x2
   304  0072                     	ds	2
   305  0074                     ?_Data_pulse_with_1:
   306  0074                     ?_Data_pulse_with_0:	
   307                           ; 1 bytes @ 0x4
   308                           
   309  0074                     ??___awdiv:	
   310                           ; 1 bytes @ 0x4
   311                           
   312  0074                     ??___awmod:	
   313                           ; 1 bytes @ 0x4
   314                           
   315  0074                     Data_pulse_with_1@n:	
   316                           ; 1 bytes @ 0x4
   317                           
   318  0074                     Data_pulse_with_0@n:	
   319                           ; 2 bytes @ 0x4
   320                           
   321                           
   322                           ; 2 bytes @ 0x4
   323  0074                     	ds	1
   324  0075                     ___awdiv@counter:
   325  0075                     ___awmod@counter:	
   326                           ; 1 bytes @ 0x5
   327                           
   328                           
   329                           ; 1 bytes @ 0x5
   330  0075                     	ds	1
   331  0076                     ??_Data_pulse_with_1:
   332  0076                     ??_Data_pulse_with_0:	
   333                           ; 1 bytes @ 0x6
   334                           
   335  0076                     ?_display_7segment:	
   336                           ; 1 bytes @ 0x6
   337                           
   338  0076                     ___awdiv@sign:	
   339                           ; 1 bytes @ 0x6
   340                           
   341  0076                     ___awmod@sign:	
   342                           ; 1 bytes @ 0x6
   343                           
   344  0076                     display_7segment@n:	
   345                           ; 1 bytes @ 0x6
   346                           
   347                           
   348                           ; 2 bytes @ 0x6
   349  0076                     	ds	1
   350  0077                     ___awdiv@quotient:
   351                           
   352                           ; 2 bytes @ 0x7
   353  0077                     	ds	1
   354  0078                     ??_display_7segment:
   355                           
   356                           ; 1 bytes @ 0x8
   357  0078                     	ds	1
   358  0079                     ?_enter_number_added:
   359  0079                     ?_enter_number_finish:	
   360                           ; 1 bytes @ 0x9
   361                           
   362  0079                     enter_number_added@n:	
   363                           ; 1 bytes @ 0x9
   364                           
   365  0079                     enter_number_finish@n:	
   366                           ; 2 bytes @ 0x9
   367                           
   368                           
   369                           ; 2 bytes @ 0x9
   370  0079                     	ds	2
   371  007B                     ??_enter_number_added:
   372  007B                     ??_enter_number_finish:	
   373                           ; 1 bytes @ 0xB
   374                           
   375                           
   376                           ; 1 bytes @ 0xB
   377  007B                     	ds	1
   378  007C                     ??_main:
   379                           
   380                           	psect	cstackBANK0
   381  0020                     __pcstackBANK0:	
   382                           ; 1 bytes @ 0xC
   383                           
   384  0020                     main@a:
   385                           
   386                           ; 2 bytes @ 0x0
   387  0020                     	ds	2
   388  0022                     main@b:
   389                           
   390                           ; 2 bytes @ 0x2
   391  0022                     	ds	2
   392                           
   393                           	psect	maintext
   394  0666                     __pmaintext:	
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 116 in file "Assignment 32.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  b               2    2[BANK0 ] int 
   405 ;;  a               2    0[BANK0 ] int 
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0, pclath, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : B1F/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   415 ;;      Params:         0       0       0       0       0       0       0       0
   416 ;;      Locals:         0       4       0       0       0       0       0       0
   417 ;;      Temps:          0       0       0       0       0       0       0       0
   418 ;;      Totals:         0       4       0       0       0       0       0       0
   419 ;;Total ram usage:        4 bytes
   420 ;; Hardware stack levels required when called: 4
   421 ;; This function calls:
   422 ;;		___awdiv
   423 ;;		___awmod
   424 ;;		_enter_number_added
   425 ;;		_enter_number_finish
   426 ;; This function is called by:
   427 ;;		Startup code after reset
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431  0666                     _main:	
   432                           ;psect for function _main
   433                           
   434  0666                     l899:	
   435                           ;incstack = 0
   436                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   437                           
   438                           
   439                           ;Assignment 32.c: 117:     TRISCbits.TRISC0 = 0;
   440  0666  0021               	movlb	1	; select bank1
   441  0667  100E               	bcf	14,0	;volatile
   442                           
   443                           ;Assignment 32.c: 118:     TRISCbits.TRISC1 = 0;
   444  0668  108E               	bcf	14,1	;volatile
   445                           
   446                           ;Assignment 32.c: 119:     TRISCbits.TRISC2 = 0;
   447  0669  110E               	bcf	14,2	;volatile
   448                           
   449                           ;Assignment 32.c: 121:     LATCbits.LATC0 = 0;
   450  066A  0022               	movlb	2	; select bank2
   451  066B  100E               	bcf	14,0	;volatile
   452                           
   453                           ;Assignment 32.c: 122:     LATCbits.LATC1 = 0;
   454  066C  108E               	bcf	14,1	;volatile
   455                           
   456                           ;Assignment 32.c: 123:     LATCbits.LATC2 = 0;
   457  066D  110E               	bcf	14,2	;volatile
   458  066E                     l901:
   459                           
   460                           ;Assignment 32.c: 125:     for (int a=59 ; a>=0 ; a--){
   461  066E  303B               	movlw	59
   462  066F  0020               	movlb	0	; select bank0
   463  0670  00A0               	movwf	main@a
   464  0671  3000               	movlw	0
   465  0672  00A1               	movwf	main@a+1
   466  0673                     l907:
   467                           
   468                           ;Assignment 32.c: 126:         for (int b=59 ; b>=0 ; b--){
   469  0673  303B               	movlw	59
   470  0674  00A2               	movwf	main@b
   471  0675  3000               	movlw	0
   472  0676  00A3               	movwf	main@b+1
   473  0677                     l913:
   474                           
   475                           ;Assignment 32.c: 127:             enter_number_added(b%10);
   476  0677  300A               	movlw	10
   477  0678  00F0               	movwf	___awmod@divisor
   478  0679  3000               	movlw	0
   479  067A  00F1               	movwf	___awmod@divisor+1
   480  067B  0823               	movf	main@b+1,w
   481  067C  00F3               	movwf	___awmod@dividend+1
   482  067D  0822               	movf	main@b,w
   483  067E  00F2               	movwf	___awmod@dividend
   484  067F  3185  25B4  3186   	fcall	___awmod
   485  0682  0871               	movf	?___awmod+1,w
   486  0683  00FA               	movwf	enter_number_added@n+1
   487  0684  0870               	movf	?___awmod,w
   488  0685  00F9               	movwf	enter_number_added@n
   489  0686  3185  2560  3186   	fcall	_enter_number_added
   490                           
   491                           ;Assignment 32.c: 128:             enter_number_added((unsigned int)(b/10));
   492  0689  300A               	movlw	10
   493  068A  00F0               	movwf	___awdiv@divisor
   494  068B  3000               	movlw	0
   495  068C  00F1               	movwf	___awdiv@divisor+1
   496  068D  0020               	movlb	0	; select bank0
   497  068E  0823               	movf	main@b+1,w
   498  068F  00F3               	movwf	___awdiv@dividend+1
   499  0690  0822               	movf	main@b,w
   500  0691  00F2               	movwf	___awdiv@dividend
   501  0692  3186  2607  3186   	fcall	___awdiv
   502  0695  0871               	movf	?___awdiv+1,w
   503  0696  00FA               	movwf	enter_number_added@n+1
   504  0697  0870               	movf	?___awdiv,w
   505  0698  00F9               	movwf	enter_number_added@n
   506  0699  3185  2560  3186   	fcall	_enter_number_added
   507                           
   508                           ;Assignment 32.c: 129:             enter_number_added(a%10);
   509  069C  300A               	movlw	10
   510  069D  00F0               	movwf	___awmod@divisor
   511  069E  3000               	movlw	0
   512  069F  00F1               	movwf	___awmod@divisor+1
   513  06A0  0020               	movlb	0	; select bank0
   514  06A1  0821               	movf	main@a+1,w
   515  06A2  00F3               	movwf	___awmod@dividend+1
   516  06A3  0820               	movf	main@a,w
   517  06A4  00F2               	movwf	___awmod@dividend
   518  06A5  3185  25B4  3186   	fcall	___awmod
   519  06A8  0871               	movf	?___awmod+1,w
   520  06A9  00FA               	movwf	enter_number_added@n+1
   521  06AA  0870               	movf	?___awmod,w
   522  06AB  00F9               	movwf	enter_number_added@n
   523  06AC  3185  2560  3186   	fcall	_enter_number_added
   524                           
   525                           ;Assignment 32.c: 130:             enter_number_finish((unsigned int)(a/10));
   526  06AF  300A               	movlw	10
   527  06B0  00F0               	movwf	___awdiv@divisor
   528  06B1  3000               	movlw	0
   529  06B2  00F1               	movwf	___awdiv@divisor+1
   530  06B3  0020               	movlb	0	; select bank0
   531  06B4  0821               	movf	main@a+1,w
   532  06B5  00F3               	movwf	___awdiv@dividend+1
   533  06B6  0820               	movf	main@a,w
   534  06B7  00F2               	movwf	___awdiv@dividend
   535  06B8  3186  2607  3186   	fcall	___awdiv
   536  06BB  0871               	movf	?___awdiv+1,w
   537  06BC  00FA               	movwf	enter_number_finish@n+1
   538  06BD  0870               	movf	?___awdiv,w
   539  06BE  00F9               	movwf	enter_number_finish@n
   540  06BF  3185  259D  3186   	fcall	_enter_number_finish
   541  06C2                     l915:
   542                           
   543                           ;Assignment 32.c: 131:         }
   544  06C2  30FF               	movlw	255
   545  06C3  0020               	movlb	0	; select bank0
   546  06C4  07A2               	addwf	main@b,f
   547  06C5  30FF               	movlw	255
   548  06C6  3DA3               	addwfc	main@b+1,f
   549  06C7                     l917:
   550  06C7  1FA3               	btfss	main@b+1,7
   551  06C8  2ECA               	goto	u651
   552  06C9  2ECB               	goto	u650
   553  06CA                     u651:
   554  06CA  2E77               	goto	l913
   555  06CB                     u650:
   556  06CB                     l919:
   557                           
   558                           ;Assignment 32.c: 132:     }
   559  06CB  30FF               	movlw	255
   560  06CC  07A0               	addwf	main@a,f
   561  06CD  30FF               	movlw	255
   562  06CE  3DA1               	addwfc	main@a+1,f
   563  06CF                     l921:
   564  06CF  1FA1               	btfss	main@a+1,7
   565  06D0  2ED2               	goto	u661
   566  06D1  2ED3               	goto	u660
   567  06D2                     u661:
   568  06D2  2E73               	goto	l907
   569  06D3                     u660:
   570  06D3                     l61:
   571  06D3  3180  2802         	ljmp	start
   572  06D5                     __end_of_main:
   573                           
   574                           	psect	text1
   575  059D                     __ptext1:	
   576 ;; *************** function _enter_number_finish *****************
   577 ;; Defined at:
   578 ;;		line 110 in file "Assignment 32.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  n               2    9[COMMON] unsigned int 
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2, status,0, pclath, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   592 ;;      Params:         2       0       0       0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0       0
   594 ;;      Temps:          1       0       0       0       0       0       0       0
   595 ;;      Totals:         3       0       0       0       0       0       0       0
   596 ;;Total ram usage:        3 bytes
   597 ;; Hardware stack levels used: 1
   598 ;; Hardware stack levels required when called: 3
   599 ;; This function calls:
   600 ;;		_display_7segment
   601 ;;		_latch_pulse
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607  059D                     _enter_number_finish:	
   608                           ;psect for function _enter_number_finish
   609                           
   610  059D                     l813:	
   611                           ;incstack = 0
   612                           ; Regs used in _enter_number_finish: [wreg+status,2+status,0+pclath+cstack]
   613                           
   614                           
   615                           ;Assignment 32.c: 111:     display_7segment(n);
   616  059D  087A               	movf	enter_number_finish@n+1,w
   617  059E  00F7               	movwf	display_7segment@n+1
   618  059F  0879               	movf	enter_number_finish@n,w
   619  05A0  00F6               	movwf	display_7segment@n
   620  05A1  3186  26D5  3185   	fcall	_display_7segment
   621                           
   622                           ;Assignment 32.c: 112:     latch_pulse(1);
   623  05A4  3001               	movlw	1
   624  05A5  00F0               	movwf	latch_pulse@n
   625  05A6  3000               	movlw	0
   626  05A7  00F1               	movwf	latch_pulse@n+1
   627  05A8  3185  2586  3185   	fcall	_latch_pulse
   628  05AB                     l815:
   629                           
   630                           ;Assignment 32.c: 113:     _delay((unsigned long)((70)*(1000000/4000.0)));
   631  05AB  3017               	movlw	23
   632  05AC  00FB               	movwf	??_enter_number_finish
   633  05AD  30B9               	movlw	185
   634  05AE                     u677:
   635  05AE  0B89               	decfsz	9,f
   636  05AF  2DAE               	goto	u677
   637  05B0  0BFB               	decfsz	??_enter_number_finish,f
   638  05B1  2DAE               	goto	u677
   639  05B2  0000               	nop
   640  05B3                     l52:
   641  05B3  0008               	return
   642  05B4                     __end_of_enter_number_finish:
   643                           
   644                           	psect	text2
   645  0586                     __ptext2:	
   646 ;; *************** function _latch_pulse *****************
   647 ;; Defined at:
   648 ;;		line 33 in file "Assignment 32.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  n               2    0[COMMON] unsigned int 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  i               2    2[COMMON] unsigned int 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   662 ;;      Params:         2       0       0       0       0       0       0       0
   663 ;;      Locals:         2       0       0       0       0       0       0       0
   664 ;;      Temps:          0       0       0       0       0       0       0       0
   665 ;;      Totals:         4       0       0       0       0       0       0       0
   666 ;;Total ram usage:        4 bytes
   667 ;; Hardware stack levels used: 1
   668 ;; This function calls:
   669 ;;		Nothing
   670 ;; This function is called by:
   671 ;;		_enter_number_finish
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675  0586                     _latch_pulse:	
   676                           ;psect for function _latch_pulse
   677                           
   678  0586                     l767:	
   679                           ;incstack = 0
   680                           ; Regs used in _latch_pulse: [wreg+status,2]
   681                           
   682                           
   683                           ;Assignment 32.c: 34:     unsigned int i=0;
   684  0586  01F2               	clrf	latch_pulse@i
   685  0587  01F3               	clrf	latch_pulse@i+1
   686                           
   687                           ;Assignment 32.c: 35:     for (i=0 ; i<n ; i++){
   688  0588  01F2               	clrf	latch_pulse@i
   689  0589  01F3               	clrf	latch_pulse@i+1
   690  058A  2D92               	goto	l15
   691  058B                     l16:
   692                           
   693                           ;Assignment 32.c: 36:         LATCbits.LATC2 = 1;
   694  058B  0022               	movlb	2	; select bank2
   695  058C  150E               	bsf	14,2	;volatile
   696                           
   697                           ;Assignment 32.c: 37:         LATCbits.LATC2 = 0;
   698  058D  110E               	bcf	14,2	;volatile
   699  058E                     l769:
   700                           
   701                           ;Assignment 32.c: 38:     }
   702  058E  3001               	movlw	1
   703  058F  07F2               	addwf	latch_pulse@i,f
   704  0590  3000               	movlw	0
   705  0591  3DF3               	addwfc	latch_pulse@i+1,f
   706  0592                     l15:
   707  0592  0871               	movf	latch_pulse@n+1,w
   708  0593  0273               	subwf	latch_pulse@i+1,w
   709  0594  1D03               	skipz
   710  0595  2D98               	goto	u355
   711  0596  0870               	movf	latch_pulse@n,w
   712  0597  0272               	subwf	latch_pulse@i,w
   713  0598                     u355:
   714  0598  1C03               	skipc
   715  0599  2D9B               	goto	u351
   716  059A  2D9C               	goto	u350
   717  059B                     u351:
   718  059B  2D8B               	goto	l16
   719  059C                     u350:
   720  059C                     l18:
   721  059C  0008               	return
   722  059D                     __end_of_latch_pulse:
   723                           
   724                           	psect	text3
   725  0560                     __ptext3:	
   726 ;; *************** function _enter_number_added *****************
   727 ;; Defined at:
   728 ;;		line 105 in file "Assignment 32.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;  n               2    9[COMMON] unsigned int 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;		None
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, status,2, status,0, pclath, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   742 ;;      Params:         2       0       0       0       0       0       0       0
   743 ;;      Locals:         0       0       0       0       0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0       0
   745 ;;      Totals:         2       0       0       0       0       0       0       0
   746 ;;Total ram usage:        2 bytes
   747 ;; Hardware stack levels used: 1
   748 ;; Hardware stack levels required when called: 3
   749 ;; This function calls:
   750 ;;		_clk_pulse
   751 ;;		_display_7segment
   752 ;; This function is called by:
   753 ;;		_main
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757  0560                     _enter_number_added:	
   758                           ;psect for function _enter_number_added
   759                           
   760  0560                     l811:	
   761                           ;incstack = 0
   762                           ; Regs used in _enter_number_added: [wreg+status,2+status,0+pclath+cstack]
   763                           
   764                           
   765                           ;Assignment 32.c: 106:     display_7segment(n);
   766  0560  087A               	movf	enter_number_added@n+1,w
   767  0561  00F7               	movwf	display_7segment@n+1
   768  0562  0879               	movf	enter_number_added@n,w
   769  0563  00F6               	movwf	display_7segment@n
   770  0564  3186  26D5  3185   	fcall	_display_7segment
   771                           
   772                           ;Assignment 32.c: 107:     clk_pulse(1);
   773  0567  3001               	movlw	1
   774  0568  00F0               	movwf	clk_pulse@n
   775  0569  3000               	movlw	0
   776  056A  00F1               	movwf	clk_pulse@n+1
   777  056B  3185  256F  3185   	fcall	_clk_pulse
   778  056E                     l49:
   779  056E  0008               	return
   780  056F                     __end_of_enter_number_added:
   781                           
   782                           	psect	text4
   783  06D5                     __ptext4:	
   784 ;; *************** function _display_7segment *****************
   785 ;; Defined at:
   786 ;;		line 51 in file "Assignment 32.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  n               2    6[COMMON] unsigned int 
   789 ;; Auto vars:     Size  Location     Type
   790 ;;		None
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      void 
   793 ;; Registers used:
   794 ;;		wreg, status,2, status,0, pclath, cstack
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   800 ;;      Params:         2       0       0       0       0       0       0       0
   801 ;;      Locals:         0       0       0       0       0       0       0       0
   802 ;;      Temps:          0       0       0       0       0       0       0       0
   803 ;;      Totals:         2       0       0       0       0       0       0       0
   804 ;;Total ram usage:        2 bytes
   805 ;; Hardware stack levels used: 1
   806 ;; Hardware stack levels required when called: 2
   807 ;; This function calls:
   808 ;;		_Data_pulse_with_0
   809 ;;		_Data_pulse_with_1
   810 ;; This function is called by:
   811 ;;		_enter_number_added
   812 ;;		_enter_number_finish
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816  06D5                     _display_7segment:	
   817                           ;psect for function _display_7segment
   818                           
   819  06D5                     l771:	
   820                           ;incstack = 0
   821                           ; Regs used in _display_7segment: [wreg+status,2+status,0+pclath+cstack]
   822                           
   823                           
   824                           ;Assignment 32.c: 52:     if (n==0){
   825  06D5  0876               	movf	display_7segment@n,w
   826  06D6  0477               	iorwf	display_7segment@n+1,w
   827  06D7  1D03               	btfss	3,2
   828  06D8  2EDA               	goto	u361
   829  06D9  2EDB               	goto	u360
   830  06DA                     u361:
   831  06DA  2EEA               	goto	l775
   832  06DB                     u360:
   833  06DB                     l773:
   834                           
   835                           ;Assignment 32.c: 53:         Data_pulse_with_1(1);
   836  06DB  3001               	movlw	1
   837  06DC  00F4               	movwf	Data_pulse_with_1@n
   838  06DD  3000               	movlw	0
   839  06DE  00F5               	movwf	Data_pulse_with_1@n+1
   840  06DF  3185  2556  3186   	fcall	_Data_pulse_with_1
   841                           
   842                           ;Assignment 32.c: 54:         Data_pulse_with_0(6);
   843  06E2  3006               	movlw	6
   844  06E3  00F4               	movwf	Data_pulse_with_0@n
   845  06E4  3000               	movlw	0
   846  06E5  00F5               	movwf	Data_pulse_with_0@n+1
   847  06E6  3185  254C  3186   	fcall	_Data_pulse_with_0
   848                           
   849                           ;Assignment 32.c: 55:     }
   850  06E9  2FFC               	goto	l46
   851  06EA                     l775:
   852  06EA  0376               	decf	display_7segment@n,w
   853  06EB  0477               	iorwf	display_7segment@n+1,w
   854  06EC  1D03               	btfss	3,2
   855  06ED  2EEF               	goto	u371
   856  06EE  2EF0               	goto	u370
   857  06EF                     u371:
   858  06EF  2F06               	goto	l779
   859  06F0                     u370:
   860  06F0                     l777:
   861                           
   862                           ;Assignment 32.c: 57:         Data_pulse_with_1(4);
   863  06F0  3004               	movlw	4
   864  06F1  00F4               	movwf	Data_pulse_with_1@n
   865  06F2  3000               	movlw	0
   866  06F3  00F5               	movwf	Data_pulse_with_1@n+1
   867  06F4  3185  2556  3186   	fcall	_Data_pulse_with_1
   868                           
   869                           ;Assignment 32.c: 58:         Data_pulse_with_0(2);
   870  06F7  3002               	movlw	2
   871  06F8  00F4               	movwf	Data_pulse_with_0@n
   872  06F9  3000               	movlw	0
   873  06FA  00F5               	movwf	Data_pulse_with_0@n+1
   874  06FB  3185  254C  3186   	fcall	_Data_pulse_with_0
   875                           
   876                           ;Assignment 32.c: 59:         Data_pulse_with_1(1);
   877  06FE  3001               	movlw	1
   878  06FF  00F4               	movwf	Data_pulse_with_1@n
   879  0700  3000               	movlw	0
   880  0701  00F5               	movwf	Data_pulse_with_1@n+1
   881  0702  3185  2556  3186   	fcall	_Data_pulse_with_1
   882                           
   883                           ;Assignment 32.c: 60:     }
   884  0705  2FFC               	goto	l46
   885  0706                     l779:
   886  0706  3002               	movlw	2
   887  0707  0676               	xorwf	display_7segment@n,w
   888  0708  0477               	iorwf	display_7segment@n+1,w
   889  0709  1D03               	btfss	3,2
   890  070A  2F0C               	goto	u381
   891  070B  2F0D               	goto	u380
   892  070C                     u381:
   893  070C  2F31               	goto	l783
   894  070D                     u380:
   895  070D                     l781:
   896                           
   897                           ;Assignment 32.c: 62:         Data_pulse_with_0(1);
   898  070D  3001               	movlw	1
   899  070E  00F4               	movwf	Data_pulse_with_0@n
   900  070F  3000               	movlw	0
   901  0710  00F5               	movwf	Data_pulse_with_0@n+1
   902  0711  3185  254C  3186   	fcall	_Data_pulse_with_0
   903                           
   904                           ;Assignment 32.c: 63:         Data_pulse_with_1(1);
   905  0714  3001               	movlw	1
   906  0715  00F4               	movwf	Data_pulse_with_1@n
   907  0716  3000               	movlw	0
   908  0717  00F5               	movwf	Data_pulse_with_1@n+1
   909  0718  3185  2556  3186   	fcall	_Data_pulse_with_1
   910                           
   911                           ;Assignment 32.c: 64:         Data_pulse_with_0(2);
   912  071B  3002               	movlw	2
   913  071C  00F4               	movwf	Data_pulse_with_0@n
   914  071D  3000               	movlw	0
   915  071E  00F5               	movwf	Data_pulse_with_0@n+1
   916  071F  3185  254C  3186   	fcall	_Data_pulse_with_0
   917                           
   918                           ;Assignment 32.c: 65:         Data_pulse_with_1(1);
   919  0722  3001               	movlw	1
   920  0723  00F4               	movwf	Data_pulse_with_1@n
   921  0724  3000               	movlw	0
   922  0725  00F5               	movwf	Data_pulse_with_1@n+1
   923  0726  3185  2556  3186   	fcall	_Data_pulse_with_1
   924                           
   925                           ;Assignment 32.c: 66:         Data_pulse_with_0(2);
   926  0729  3002               	movlw	2
   927  072A  00F4               	movwf	Data_pulse_with_0@n
   928  072B  3000               	movlw	0
   929  072C  00F5               	movwf	Data_pulse_with_0@n+1
   930  072D  3185  254C  3186   	fcall	_Data_pulse_with_0
   931                           
   932                           ;Assignment 32.c: 67:     }
   933  0730  2FFC               	goto	l46
   934  0731                     l783:
   935  0731  3003               	movlw	3
   936  0732  0676               	xorwf	display_7segment@n,w
   937  0733  0477               	iorwf	display_7segment@n+1,w
   938  0734  1D03               	btfss	3,2
   939  0735  2F37               	goto	u391
   940  0736  2F38               	goto	u390
   941  0737                     u391:
   942  0737  2F4E               	goto	l787
   943  0738                     u390:
   944  0738                     l785:
   945                           
   946                           ;Assignment 32.c: 69:         Data_pulse_with_0(1);
   947  0738  3001               	movlw	1
   948  0739  00F4               	movwf	Data_pulse_with_0@n
   949  073A  3000               	movlw	0
   950  073B  00F5               	movwf	Data_pulse_with_0@n+1
   951  073C  3185  254C  3186   	fcall	_Data_pulse_with_0
   952                           
   953                           ;Assignment 32.c: 70:         Data_pulse_with_1(2);
   954  073F  3002               	movlw	2
   955  0740  00F4               	movwf	Data_pulse_with_1@n
   956  0741  3000               	movlw	0
   957  0742  00F5               	movwf	Data_pulse_with_1@n+1
   958  0743  3185  2556  3186   	fcall	_Data_pulse_with_1
   959                           
   960                           ;Assignment 32.c: 71:         Data_pulse_with_0(4);
   961  0746  3004               	movlw	4
   962  0747  00F4               	movwf	Data_pulse_with_0@n
   963  0748  3000               	movlw	0
   964  0749  00F5               	movwf	Data_pulse_with_0@n+1
   965  074A  3185  254C  3186   	fcall	_Data_pulse_with_0
   966                           
   967                           ;Assignment 32.c: 72:     }
   968  074D  2FFC               	goto	l46
   969  074E                     l787:
   970  074E  3004               	movlw	4
   971  074F  0676               	xorwf	display_7segment@n,w
   972  0750  0477               	iorwf	display_7segment@n+1,w
   973  0751  1D03               	btfss	3,2
   974  0752  2F54               	goto	u401
   975  0753  2F55               	goto	u400
   976  0754                     u401:
   977  0754  2F72               	goto	l791
   978  0755                     u400:
   979  0755                     l789:
   980                           
   981                           ;Assignment 32.c: 74:         Data_pulse_with_0(2);
   982  0755  3002               	movlw	2
   983  0756  00F4               	movwf	Data_pulse_with_0@n
   984  0757  3000               	movlw	0
   985  0758  00F5               	movwf	Data_pulse_with_0@n+1
   986  0759  3185  254C  3186   	fcall	_Data_pulse_with_0
   987                           
   988                           ;Assignment 32.c: 75:         Data_pulse_with_1(2);
   989  075C  3002               	movlw	2
   990  075D  00F4               	movwf	Data_pulse_with_1@n
   991  075E  3000               	movlw	0
   992  075F  00F5               	movwf	Data_pulse_with_1@n+1
   993  0760  3185  2556  3186   	fcall	_Data_pulse_with_1
   994                           
   995                           ;Assignment 32.c: 76:         Data_pulse_with_0(2);
   996  0763  3002               	movlw	2
   997  0764  00F4               	movwf	Data_pulse_with_0@n
   998  0765  3000               	movlw	0
   999  0766  00F5               	movwf	Data_pulse_with_0@n+1
  1000  0767  3185  254C  3186   	fcall	_Data_pulse_with_0
  1001                           
  1002                           ;Assignment 32.c: 77:         Data_pulse_with_1(1);
  1003  076A  3001               	movlw	1
  1004  076B  00F4               	movwf	Data_pulse_with_1@n
  1005  076C  3000               	movlw	0
  1006  076D  00F5               	movwf	Data_pulse_with_1@n+1
  1007  076E  3185  2556  3186   	fcall	_Data_pulse_with_1
  1008                           
  1009                           ;Assignment 32.c: 78:     }
  1010  0771  2FFC               	goto	l46
  1011  0772                     l791:
  1012  0772  3005               	movlw	5
  1013  0773  0676               	xorwf	display_7segment@n,w
  1014  0774  0477               	iorwf	display_7segment@n+1,w
  1015  0775  1D03               	btfss	3,2
  1016  0776  2F78               	goto	u411
  1017  0777  2F79               	goto	u410
  1018  0778                     u411:
  1019  0778  2F9D               	goto	l795
  1020  0779                     u410:
  1021  0779                     l793:
  1022                           
  1023                           ;Assignment 32.c: 80:         Data_pulse_with_0(2);
  1024  0779  3002               	movlw	2
  1025  077A  00F4               	movwf	Data_pulse_with_0@n
  1026  077B  3000               	movlw	0
  1027  077C  00F5               	movwf	Data_pulse_with_0@n+1
  1028  077D  3185  254C  3186   	fcall	_Data_pulse_with_0
  1029                           
  1030                           ;Assignment 32.c: 81:         Data_pulse_with_1(1);
  1031  0780  3001               	movlw	1
  1032  0781  00F4               	movwf	Data_pulse_with_1@n
  1033  0782  3000               	movlw	0
  1034  0783  00F5               	movwf	Data_pulse_with_1@n+1
  1035  0784  3185  2556  3186   	fcall	_Data_pulse_with_1
  1036                           
  1037                           ;Assignment 32.c: 82:         Data_pulse_with_0(2);
  1038  0787  3002               	movlw	2
  1039  0788  00F4               	movwf	Data_pulse_with_0@n
  1040  0789  3000               	movlw	0
  1041  078A  00F5               	movwf	Data_pulse_with_0@n+1
  1042  078B  3185  254C  3186   	fcall	_Data_pulse_with_0
  1043                           
  1044                           ;Assignment 32.c: 83:         Data_pulse_with_1(1);
  1045  078E  3001               	movlw	1
  1046  078F  00F4               	movwf	Data_pulse_with_1@n
  1047  0790  3000               	movlw	0
  1048  0791  00F5               	movwf	Data_pulse_with_1@n+1
  1049  0792  3185  2556  3186   	fcall	_Data_pulse_with_1
  1050                           
  1051                           ;Assignment 32.c: 84:         Data_pulse_with_0(1);
  1052  0795  3001               	movlw	1
  1053  0796  00F4               	movwf	Data_pulse_with_0@n
  1054  0797  3000               	movlw	0
  1055  0798  00F5               	movwf	Data_pulse_with_0@n+1
  1056  0799  3185  254C  3186   	fcall	_Data_pulse_with_0
  1057                           
  1058                           ;Assignment 32.c: 85:     }
  1059  079C  2FFC               	goto	l46
  1060  079D                     l795:
  1061  079D  3006               	movlw	6
  1062  079E  0676               	xorwf	display_7segment@n,w
  1063  079F  0477               	iorwf	display_7segment@n+1,w
  1064  07A0  1D03               	btfss	3,2
  1065  07A1  2FA3               	goto	u421
  1066  07A2  2FA4               	goto	u420
  1067  07A3                     u421:
  1068  07A3  2FBA               	goto	l799
  1069  07A4                     u420:
  1070  07A4                     l797:
  1071                           
  1072                           ;Assignment 32.c: 87:         Data_pulse_with_0(5);
  1073  07A4  3005               	movlw	5
  1074  07A5  00F4               	movwf	Data_pulse_with_0@n
  1075  07A6  3000               	movlw	0
  1076  07A7  00F5               	movwf	Data_pulse_with_0@n+1
  1077  07A8  3185  254C  3186   	fcall	_Data_pulse_with_0
  1078                           
  1079                           ;Assignment 32.c: 88:         Data_pulse_with_1(1);
  1080  07AB  3001               	movlw	1
  1081  07AC  00F4               	movwf	Data_pulse_with_1@n
  1082  07AD  3000               	movlw	0
  1083  07AE  00F5               	movwf	Data_pulse_with_1@n+1
  1084  07AF  3185  2556  3186   	fcall	_Data_pulse_with_1
  1085                           
  1086                           ;Assignment 32.c: 89:         Data_pulse_with_0(1);
  1087  07B2  3001               	movlw	1
  1088  07B3  00F4               	movwf	Data_pulse_with_0@n
  1089  07B4  3000               	movlw	0
  1090  07B5  00F5               	movwf	Data_pulse_with_0@n+1
  1091  07B6  3185  254C  3186   	fcall	_Data_pulse_with_0
  1092                           
  1093                           ;Assignment 32.c: 90:     }
  1094  07B9  2FFC               	goto	l46
  1095  07BA                     l799:
  1096  07BA  3007               	movlw	7
  1097  07BB  0676               	xorwf	display_7segment@n,w
  1098  07BC  0477               	iorwf	display_7segment@n+1,w
  1099  07BD  1D03               	btfss	3,2
  1100  07BE  2FC0               	goto	u431
  1101  07BF  2FC1               	goto	u430
  1102  07C0                     u431:
  1103  07C0  2FD0               	goto	l803
  1104  07C1                     u430:
  1105  07C1                     l801:
  1106                           
  1107                           ;Assignment 32.c: 92:         Data_pulse_with_1(4);
  1108  07C1  3004               	movlw	4
  1109  07C2  00F4               	movwf	Data_pulse_with_1@n
  1110  07C3  3000               	movlw	0
  1111  07C4  00F5               	movwf	Data_pulse_with_1@n+1
  1112  07C5  3185  2556  3186   	fcall	_Data_pulse_with_1
  1113                           
  1114                           ;Assignment 32.c: 93:         Data_pulse_with_0(3);
  1115  07C8  3003               	movlw	3
  1116  07C9  00F4               	movwf	Data_pulse_with_0@n
  1117  07CA  3000               	movlw	0
  1118  07CB  00F5               	movwf	Data_pulse_with_0@n+1
  1119  07CC  3185  254C  3186   	fcall	_Data_pulse_with_0
  1120                           
  1121                           ;Assignment 32.c: 94:     }
  1122  07CF  2FFC               	goto	l46
  1123  07D0                     l803:
  1124  07D0  3008               	movlw	8
  1125  07D1  0676               	xorwf	display_7segment@n,w
  1126  07D2  0477               	iorwf	display_7segment@n+1,w
  1127  07D3  1D03               	btfss	3,2
  1128  07D4  2FD6               	goto	u441
  1129  07D5  2FD7               	goto	u440
  1130  07D6                     u441:
  1131  07D6  2FDF               	goto	l807
  1132  07D7                     u440:
  1133  07D7                     l805:
  1134                           
  1135                           ;Assignment 32.c: 96:         Data_pulse_with_0(7);
  1136  07D7  3007               	movlw	7
  1137  07D8  00F4               	movwf	Data_pulse_with_0@n
  1138  07D9  3000               	movlw	0
  1139  07DA  00F5               	movwf	Data_pulse_with_0@n+1
  1140  07DB  3185  254C  3186   	fcall	_Data_pulse_with_0
  1141                           
  1142                           ;Assignment 32.c: 97:     }
  1143  07DE  2FFC               	goto	l46
  1144  07DF                     l807:
  1145  07DF  3009               	movlw	9
  1146  07E0  0676               	xorwf	display_7segment@n,w
  1147  07E1  0477               	iorwf	display_7segment@n+1,w
  1148  07E2  1D03               	btfss	3,2
  1149  07E3  2FE5               	goto	u451
  1150  07E4  2FE6               	goto	u450
  1151  07E5                     u451:
  1152  07E5  2FFC               	goto	l40
  1153  07E6                     u450:
  1154  07E6                     l809:
  1155                           
  1156                           ;Assignment 32.c: 99:         Data_pulse_with_0(2);
  1157  07E6  3002               	movlw	2
  1158  07E7  00F4               	movwf	Data_pulse_with_0@n
  1159  07E8  3000               	movlw	0
  1160  07E9  00F5               	movwf	Data_pulse_with_0@n+1
  1161  07EA  3185  254C  3186   	fcall	_Data_pulse_with_0
  1162                           
  1163                           ;Assignment 32.c: 100:         Data_pulse_with_1(1);
  1164  07ED  3001               	movlw	1
  1165  07EE  00F4               	movwf	Data_pulse_with_1@n
  1166  07EF  3000               	movlw	0
  1167  07F0  00F5               	movwf	Data_pulse_with_1@n+1
  1168  07F1  3185  2556  3186   	fcall	_Data_pulse_with_1
  1169                           
  1170                           ;Assignment 32.c: 101:         Data_pulse_with_0(4);
  1171  07F4  3004               	movlw	4
  1172  07F5  00F4               	movwf	Data_pulse_with_0@n
  1173  07F6  3000               	movlw	0
  1174  07F7  00F5               	movwf	Data_pulse_with_0@n+1
  1175  07F8  3185  254C  3186   	fcall	_Data_pulse_with_0
  1176  07FB  2FFC               	goto	l46
  1177  07FC                     l40:
  1178  07FC                     l46:
  1179  07FC  0008               	return
  1180  07FD                     __end_of_display_7segment:
  1181                           
  1182                           	psect	text5
  1183  0556                     __ptext5:	
  1184 ;; *************** function _Data_pulse_with_1 *****************
  1185 ;; Defined at:
  1186 ;;		line 41 in file "Assignment 32.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  n               2    4[COMMON] unsigned int 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;		None
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0, pclath, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1200 ;;      Params:         2       0       0       0       0       0       0       0
  1201 ;;      Locals:         0       0       0       0       0       0       0       0
  1202 ;;      Temps:          0       0       0       0       0       0       0       0
  1203 ;;      Totals:         2       0       0       0       0       0       0       0
  1204 ;;Total ram usage:        2 bytes
  1205 ;; Hardware stack levels used: 1
  1206 ;; Hardware stack levels required when called: 1
  1207 ;; This function calls:
  1208 ;;		_clk_pulse
  1209 ;; This function is called by:
  1210 ;;		_display_7segment
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214  0556                     _Data_pulse_with_1:	
  1215                           ;psect for function _Data_pulse_with_1
  1216                           
  1217  0556                     l759:	
  1218                           ;incstack = 0
  1219                           ; Regs used in _Data_pulse_with_1: [wreg+status,2+status,0+pclath+cstack]
  1220                           
  1221                           
  1222                           ;Assignment 32.c: 42:     LATCbits.LATC1 = 1;
  1223  0556  0022               	movlb	2	; select bank2
  1224  0557  148E               	bsf	14,1	;volatile
  1225  0558                     l761:
  1226                           
  1227                           ;Assignment 32.c: 43:     clk_pulse(n);
  1228  0558  0875               	movf	Data_pulse_with_1@n+1,w
  1229  0559  00F1               	movwf	clk_pulse@n+1
  1230  055A  0874               	movf	Data_pulse_with_1@n,w
  1231  055B  00F0               	movwf	clk_pulse@n
  1232  055C  3185  256F  3185   	fcall	_clk_pulse
  1233  055F                     l21:
  1234  055F  0008               	return
  1235  0560                     __end_of_Data_pulse_with_1:
  1236                           
  1237                           	psect	text6
  1238  054C                     __ptext6:	
  1239 ;; *************** function _Data_pulse_with_0 *****************
  1240 ;; Defined at:
  1241 ;;		line 46 in file "Assignment 32.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  n               2    4[COMMON] unsigned int 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, status,0, pclath, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1255 ;;      Params:         2       0       0       0       0       0       0       0
  1256 ;;      Locals:         0       0       0       0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0       0
  1258 ;;      Totals:         2       0       0       0       0       0       0       0
  1259 ;;Total ram usage:        2 bytes
  1260 ;; Hardware stack levels used: 1
  1261 ;; Hardware stack levels required when called: 1
  1262 ;; This function calls:
  1263 ;;		_clk_pulse
  1264 ;; This function is called by:
  1265 ;;		_display_7segment
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269  054C                     _Data_pulse_with_0:	
  1270                           ;psect for function _Data_pulse_with_0
  1271                           
  1272  054C                     l763:	
  1273                           ;incstack = 0
  1274                           ; Regs used in _Data_pulse_with_0: [wreg+status,2+status,0+pclath+cstack]
  1275                           
  1276                           
  1277                           ;Assignment 32.c: 47:     LATCbits.LATC1 = 0;
  1278  054C  0022               	movlb	2	; select bank2
  1279  054D  108E               	bcf	14,1	;volatile
  1280  054E                     l765:
  1281                           
  1282                           ;Assignment 32.c: 48:     clk_pulse(n);
  1283  054E  0875               	movf	Data_pulse_with_0@n+1,w
  1284  054F  00F1               	movwf	clk_pulse@n+1
  1285  0550  0874               	movf	Data_pulse_with_0@n,w
  1286  0551  00F0               	movwf	clk_pulse@n
  1287  0552  3185  256F  3185   	fcall	_clk_pulse
  1288  0555                     l24:
  1289  0555  0008               	return
  1290  0556                     __end_of_Data_pulse_with_0:
  1291                           
  1292                           	psect	text7
  1293  056F                     __ptext7:	
  1294 ;; *************** function _clk_pulse *****************
  1295 ;; Defined at:
  1296 ;;		line 25 in file "Assignment 32.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  n               2    0[COMMON] unsigned int 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  i               2    2[COMMON] unsigned int 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1310 ;;      Params:         2       0       0       0       0       0       0       0
  1311 ;;      Locals:         2       0       0       0       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0
  1313 ;;      Totals:         4       0       0       0       0       0       0       0
  1314 ;;Total ram usage:        4 bytes
  1315 ;; Hardware stack levels used: 1
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_Data_pulse_with_1
  1320 ;;		_Data_pulse_with_0
  1321 ;;		_enter_number_added
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325  056F                     _clk_pulse:	
  1326                           ;psect for function _clk_pulse
  1327                           
  1328  056F                     l755:	
  1329                           ;incstack = 0
  1330                           ; Regs used in _clk_pulse: [wreg+status,2]
  1331                           
  1332                           
  1333                           ;Assignment 32.c: 26:     unsigned int i=0;
  1334  056F  01F2               	clrf	clk_pulse@i
  1335  0570  01F3               	clrf	clk_pulse@i+1
  1336                           
  1337                           ;Assignment 32.c: 27:     for (i=0 ; i<n ; i++){
  1338  0571  01F2               	clrf	clk_pulse@i
  1339  0572  01F3               	clrf	clk_pulse@i+1
  1340  0573  2D7B               	goto	l9
  1341  0574                     l10:
  1342                           
  1343                           ;Assignment 32.c: 28:         LATCbits.LATC0 = 1;
  1344  0574  0022               	movlb	2	; select bank2
  1345  0575  140E               	bsf	14,0	;volatile
  1346                           
  1347                           ;Assignment 32.c: 29:         LATCbits.LATC0 = 0;
  1348  0576  100E               	bcf	14,0	;volatile
  1349  0577                     l757:
  1350                           
  1351                           ;Assignment 32.c: 30:     }
  1352  0577  3001               	movlw	1
  1353  0578  07F2               	addwf	clk_pulse@i,f
  1354  0579  3000               	movlw	0
  1355  057A  3DF3               	addwfc	clk_pulse@i+1,f
  1356  057B                     l9:
  1357  057B  0871               	movf	clk_pulse@n+1,w
  1358  057C  0273               	subwf	clk_pulse@i+1,w
  1359  057D  1D03               	skipz
  1360  057E  2D81               	goto	u345
  1361  057F  0870               	movf	clk_pulse@n,w
  1362  0580  0272               	subwf	clk_pulse@i,w
  1363  0581                     u345:
  1364  0581  1C03               	skipc
  1365  0582  2D84               	goto	u341
  1366  0583  2D85               	goto	u340
  1367  0584                     u341:
  1368  0584  2D74               	goto	l10
  1369  0585                     u340:
  1370  0585                     l12:
  1371  0585  0008               	return
  1372  0586                     __end_of_clk_pulse:
  1373                           
  1374                           	psect	text8
  1375  05B4                     __ptext8:	
  1376 ;; *************** function ___awmod *****************
  1377 ;; Defined at:
  1378 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  divisor         2    0[COMMON] int 
  1381 ;;  dividend        2    2[COMMON] int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  sign            1    6[COMMON] unsigned char 
  1384 ;;  counter         1    5[COMMON] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  2    0[COMMON] int 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1394 ;;      Params:         4       0       0       0       0       0       0       0
  1395 ;;      Locals:         2       0       0       0       0       0       0       0
  1396 ;;      Temps:          1       0       0       0       0       0       0       0
  1397 ;;      Totals:         7       0       0       0       0       0       0       0
  1398 ;;Total ram usage:        7 bytes
  1399 ;; Hardware stack levels used: 1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407  05B4                     ___awmod:	
  1408                           ;psect for function ___awmod
  1409                           
  1410  05B4                     l861:	
  1411                           ;incstack = 0
  1412                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1413                           
  1414  05B4  01F6               	clrf	___awmod@sign
  1415  05B5                     l863:
  1416  05B5  1FF3               	btfss	___awmod@dividend+1,7
  1417  05B6  2DB8               	goto	u561
  1418  05B7  2DB9               	goto	u560
  1419  05B8                     u561:
  1420  05B8  2DC0               	goto	l869
  1421  05B9                     u560:
  1422  05B9                     l865:
  1423  05B9  09F2               	comf	___awmod@dividend,f
  1424  05BA  09F3               	comf	___awmod@dividend+1,f
  1425  05BB  0AF2               	incf	___awmod@dividend,f
  1426  05BC  1903               	skipnz
  1427  05BD  0AF3               	incf	___awmod@dividend+1,f
  1428  05BE                     l867:
  1429  05BE  01F6               	clrf	___awmod@sign
  1430  05BF  0AF6               	incf	___awmod@sign,f
  1431  05C0                     l869:
  1432  05C0  1FF1               	btfss	___awmod@divisor+1,7
  1433  05C1  2DC3               	goto	u571
  1434  05C2  2DC4               	goto	u570
  1435  05C3                     u571:
  1436  05C3  2DC9               	goto	l873
  1437  05C4                     u570:
  1438  05C4                     l871:
  1439  05C4  09F0               	comf	___awmod@divisor,f
  1440  05C5  09F1               	comf	___awmod@divisor+1,f
  1441  05C6  0AF0               	incf	___awmod@divisor,f
  1442  05C7  1903               	skipnz
  1443  05C8  0AF1               	incf	___awmod@divisor+1,f
  1444  05C9                     l873:
  1445  05C9  0870               	movf	___awmod@divisor,w
  1446  05CA  0471               	iorwf	___awmod@divisor+1,w
  1447  05CB  1903               	btfsc	3,2
  1448  05CC  2DCE               	goto	u581
  1449  05CD  2DCF               	goto	u580
  1450  05CE                     u581:
  1451  05CE  2DF8               	goto	l891
  1452  05CF                     u580:
  1453  05CF                     l875:
  1454  05CF  01F5               	clrf	___awmod@counter
  1455  05D0  0AF5               	incf	___awmod@counter,f
  1456  05D1  2DDB               	goto	l881
  1457  05D2                     l877:
  1458  05D2  3001               	movlw	1
  1459  05D3                     u595:
  1460  05D3  35F0               	lslf	___awmod@divisor,f
  1461  05D4  0DF1               	rlf	___awmod@divisor+1,f
  1462  05D5  0B89               	decfsz	9,f
  1463  05D6  2DD3               	goto	u595
  1464  05D7                     l879:
  1465  05D7  3001               	movlw	1
  1466  05D8  00F4               	movwf	??___awmod
  1467  05D9  0874               	movf	??___awmod,w
  1468  05DA  07F5               	addwf	___awmod@counter,f
  1469  05DB                     l881:
  1470  05DB  1FF1               	btfss	___awmod@divisor+1,7
  1471  05DC  2DDE               	goto	u601
  1472  05DD  2DDF               	goto	u600
  1473  05DE                     u601:
  1474  05DE  2DD2               	goto	l877
  1475  05DF                     u600:
  1476  05DF                     l883:
  1477  05DF  0871               	movf	___awmod@divisor+1,w
  1478  05E0  0273               	subwf	___awmod@dividend+1,w
  1479  05E1  1D03               	skipz
  1480  05E2  2DE5               	goto	u615
  1481  05E3  0870               	movf	___awmod@divisor,w
  1482  05E4  0272               	subwf	___awmod@dividend,w
  1483  05E5                     u615:
  1484  05E5  1C03               	skipc
  1485  05E6  2DE8               	goto	u611
  1486  05E7  2DE9               	goto	u610
  1487  05E8                     u611:
  1488  05E8  2DED               	goto	l887
  1489  05E9                     u610:
  1490  05E9                     l885:
  1491  05E9  0870               	movf	___awmod@divisor,w
  1492  05EA  02F2               	subwf	___awmod@dividend,f
  1493  05EB  0871               	movf	___awmod@divisor+1,w
  1494  05EC  3BF3               	subwfb	___awmod@dividend+1,f
  1495  05ED                     l887:
  1496  05ED  3001               	movlw	1
  1497  05EE                     u625:
  1498  05EE  36F1               	lsrf	___awmod@divisor+1,f
  1499  05EF  0CF0               	rrf	___awmod@divisor,f
  1500  05F0  0B89               	decfsz	9,f
  1501  05F1  2DEE               	goto	u625
  1502  05F2                     l889:
  1503  05F2  3001               	movlw	1
  1504  05F3  02F5               	subwf	___awmod@counter,f
  1505  05F4  1D03               	btfss	3,2
  1506  05F5  2DF7               	goto	u631
  1507  05F6  2DF8               	goto	u630
  1508  05F7                     u631:
  1509  05F7  2DDF               	goto	l883
  1510  05F8                     u630:
  1511  05F8                     l891:
  1512  05F8  0876               	movf	___awmod@sign,w
  1513  05F9  1903               	btfsc	3,2
  1514  05FA  2DFC               	goto	u641
  1515  05FB  2DFD               	goto	u640
  1516  05FC                     u641:
  1517  05FC  2E02               	goto	l895
  1518  05FD                     u640:
  1519  05FD                     l893:
  1520  05FD  09F2               	comf	___awmod@dividend,f
  1521  05FE  09F3               	comf	___awmod@dividend+1,f
  1522  05FF  0AF2               	incf	___awmod@dividend,f
  1523  0600  1903               	skipnz
  1524  0601  0AF3               	incf	___awmod@dividend+1,f
  1525  0602                     l895:
  1526  0602  0873               	movf	___awmod@dividend+1,w
  1527  0603  00F1               	movwf	?___awmod+1
  1528  0604  0872               	movf	___awmod@dividend,w
  1529  0605  00F0               	movwf	?___awmod
  1530  0606                     l295:
  1531  0606  0008               	return
  1532  0607                     __end_of___awmod:
  1533                           
  1534                           	psect	text9
  1535  0607                     __ptext9:	
  1536 ;; *************** function ___awdiv *****************
  1537 ;; Defined at:
  1538 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  divisor         2    0[COMMON] int 
  1541 ;;  dividend        2    2[COMMON] int 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  quotient        2    7[COMMON] int 
  1544 ;;  sign            1    6[COMMON] unsigned char 
  1545 ;;  counter         1    5[COMMON] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  2    0[COMMON] int 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1555 ;;      Params:         4       0       0       0       0       0       0       0
  1556 ;;      Locals:         4       0       0       0       0       0       0       0
  1557 ;;      Temps:          1       0       0       0       0       0       0       0
  1558 ;;      Totals:         9       0       0       0       0       0       0       0
  1559 ;;Total ram usage:        9 bytes
  1560 ;; Hardware stack levels used: 1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_main
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568  0607                     ___awdiv:	
  1569                           ;psect for function ___awdiv
  1570                           
  1571  0607                     l817:	
  1572                           ;incstack = 0
  1573                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1574                           
  1575  0607  01F6               	clrf	___awdiv@sign
  1576  0608                     l819:
  1577  0608  1FF1               	btfss	___awdiv@divisor+1,7
  1578  0609  2E0B               	goto	u461
  1579  060A  2E0C               	goto	u460
  1580  060B                     u461:
  1581  060B  2E13               	goto	l825
  1582  060C                     u460:
  1583  060C                     l821:
  1584  060C  09F0               	comf	___awdiv@divisor,f
  1585  060D  09F1               	comf	___awdiv@divisor+1,f
  1586  060E  0AF0               	incf	___awdiv@divisor,f
  1587  060F  1903               	skipnz
  1588  0610  0AF1               	incf	___awdiv@divisor+1,f
  1589  0611                     l823:
  1590  0611  01F6               	clrf	___awdiv@sign
  1591  0612  0AF6               	incf	___awdiv@sign,f
  1592  0613                     l825:
  1593  0613  1FF3               	btfss	___awdiv@dividend+1,7
  1594  0614  2E16               	goto	u471
  1595  0615  2E17               	goto	u470
  1596  0616                     u471:
  1597  0616  2E20               	goto	l831
  1598  0617                     u470:
  1599  0617                     l827:
  1600  0617  09F2               	comf	___awdiv@dividend,f
  1601  0618  09F3               	comf	___awdiv@dividend+1,f
  1602  0619  0AF2               	incf	___awdiv@dividend,f
  1603  061A  1903               	skipnz
  1604  061B  0AF3               	incf	___awdiv@dividend+1,f
  1605  061C                     l829:
  1606  061C  3001               	movlw	1
  1607  061D  00F4               	movwf	??___awdiv
  1608  061E  0874               	movf	??___awdiv,w
  1609  061F  06F6               	xorwf	___awdiv@sign,f
  1610  0620                     l831:
  1611  0620  01F7               	clrf	___awdiv@quotient
  1612  0621  01F8               	clrf	___awdiv@quotient+1
  1613  0622                     l833:
  1614  0622  0870               	movf	___awdiv@divisor,w
  1615  0623  0471               	iorwf	___awdiv@divisor+1,w
  1616  0624  1903               	btfsc	3,2
  1617  0625  2E27               	goto	u481
  1618  0626  2E28               	goto	u480
  1619  0627                     u481:
  1620  0627  2E57               	goto	l853
  1621  0628                     u480:
  1622  0628                     l835:
  1623  0628  01F5               	clrf	___awdiv@counter
  1624  0629  0AF5               	incf	___awdiv@counter,f
  1625  062A  2E34               	goto	l841
  1626  062B                     l837:
  1627  062B  3001               	movlw	1
  1628  062C                     u495:
  1629  062C  35F0               	lslf	___awdiv@divisor,f
  1630  062D  0DF1               	rlf	___awdiv@divisor+1,f
  1631  062E  0B89               	decfsz	9,f
  1632  062F  2E2C               	goto	u495
  1633  0630                     l839:
  1634  0630  3001               	movlw	1
  1635  0631  00F4               	movwf	??___awdiv
  1636  0632  0874               	movf	??___awdiv,w
  1637  0633  07F5               	addwf	___awdiv@counter,f
  1638  0634                     l841:
  1639  0634  1FF1               	btfss	___awdiv@divisor+1,7
  1640  0635  2E37               	goto	u501
  1641  0636  2E38               	goto	u500
  1642  0637                     u501:
  1643  0637  2E2B               	goto	l837
  1644  0638                     u500:
  1645  0638                     l843:
  1646  0638  3001               	movlw	1
  1647  0639                     u515:
  1648  0639  35F7               	lslf	___awdiv@quotient,f
  1649  063A  0DF8               	rlf	___awdiv@quotient+1,f
  1650  063B  0B89               	decfsz	9,f
  1651  063C  2E39               	goto	u515
  1652  063D  0871               	movf	___awdiv@divisor+1,w
  1653  063E  0273               	subwf	___awdiv@dividend+1,w
  1654  063F  1D03               	skipz
  1655  0640  2E43               	goto	u525
  1656  0641  0870               	movf	___awdiv@divisor,w
  1657  0642  0272               	subwf	___awdiv@dividend,w
  1658  0643                     u525:
  1659  0643  1C03               	skipc
  1660  0644  2E46               	goto	u521
  1661  0645  2E47               	goto	u520
  1662  0646                     u521:
  1663  0646  2E4C               	goto	l849
  1664  0647                     u520:
  1665  0647                     l845:
  1666  0647  0870               	movf	___awdiv@divisor,w
  1667  0648  02F2               	subwf	___awdiv@dividend,f
  1668  0649  0871               	movf	___awdiv@divisor+1,w
  1669  064A  3BF3               	subwfb	___awdiv@dividend+1,f
  1670  064B                     l847:
  1671  064B  1477               	bsf	___awdiv@quotient,0
  1672  064C                     l849:
  1673  064C  3001               	movlw	1
  1674  064D                     u535:
  1675  064D  36F1               	lsrf	___awdiv@divisor+1,f
  1676  064E  0CF0               	rrf	___awdiv@divisor,f
  1677  064F  0B89               	decfsz	9,f
  1678  0650  2E4D               	goto	u535
  1679  0651                     l851:
  1680  0651  3001               	movlw	1
  1681  0652  02F5               	subwf	___awdiv@counter,f
  1682  0653  1D03               	btfss	3,2
  1683  0654  2E56               	goto	u541
  1684  0655  2E57               	goto	u540
  1685  0656                     u541:
  1686  0656  2E38               	goto	l843
  1687  0657                     u540:
  1688  0657                     l853:
  1689  0657  0876               	movf	___awdiv@sign,w
  1690  0658  1903               	btfsc	3,2
  1691  0659  2E5B               	goto	u551
  1692  065A  2E5C               	goto	u550
  1693  065B                     u551:
  1694  065B  2E61               	goto	l857
  1695  065C                     u550:
  1696  065C                     l855:
  1697  065C  09F7               	comf	___awdiv@quotient,f
  1698  065D  09F8               	comf	___awdiv@quotient+1,f
  1699  065E  0AF7               	incf	___awdiv@quotient,f
  1700  065F  1903               	skipnz
  1701  0660  0AF8               	incf	___awdiv@quotient+1,f
  1702  0661                     l857:
  1703  0661  0878               	movf	___awdiv@quotient+1,w
  1704  0662  00F1               	movwf	?___awdiv+1
  1705  0663  0877               	movf	___awdiv@quotient,w
  1706  0664  00F0               	movwf	?___awdiv
  1707  0665                     l282:
  1708  0665  0008               	return
  1709  0666                     __end_of___awdiv:
  1710  007E                     btemp	set	126	;btemp
  1711  007E                     wtemp0	set	126
  1712                           
  1713                           	psect	idloc
  1714                           
  1715                           ;Config register IDLOC0 @ 0x8000
  1716                           ;	unspecified, using default values
  1717  8000                     	org	32768
  1718  8000  3FFF               	dw	16383
  1719                           
  1720                           ;Config register IDLOC1 @ 0x8001
  1721                           ;	unspecified, using default values
  1722  8001                     	org	32769
  1723  8001  3FFF               	dw	16383
  1724                           
  1725                           ;Config register IDLOC2 @ 0x8002
  1726                           ;	unspecified, using default values
  1727  8002                     	org	32770
  1728  8002  3FFF               	dw	16383
  1729                           
  1730                           ;Config register IDLOC3 @ 0x8003
  1731                           ;	unspecified, using default values
  1732  8003                     	org	32771
  1733  8003  3FFF               	dw	16383
  1734                           
  1735                           	psect	config
  1736                           
  1737                           ;Config register CONFIG1 @ 0x8007
  1738                           ;	Oscillator Selection Bits
  1739                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1740                           ;	Watchdog Timer Enable
  1741                           ;	WDTE = OFF, WDT disabled
  1742                           ;	Power-up Timer Enable
  1743                           ;	PWRTE = OFF, PWRT disabled
  1744                           ;	MCLR Pin Function Select
  1745                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  1746                           ;	Flash Program Memory Code Protection
  1747                           ;	CP = OFF, Program memory code protection is disabled
  1748                           ;	Brown-out Reset Enable
  1749                           ;	BOREN = OFF, Brown-out Reset disabled
  1750                           ;	Clock Out Enable
  1751                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1752                           ;	Internal/External Switchover Mode
  1753                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  1754                           ;	Fail-Safe Clock Monitor Enable
  1755                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1756  8007                     	org	32775
  1757  8007  09A4               	dw	2468
  1758                           
  1759                           ;Config register CONFIG2 @ 0x8008
  1760                           ;	Flash Memory Self-Write Protection
  1761                           ;	WRT = OFF, Write protection off
  1762                           ;	Stack Overflow/Underflow Reset Enable
  1763                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  1764                           ;	Brown-out Reset Voltage Selection
  1765                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1766                           ;	Low-Power Brown Out Reset
  1767                           ;	LPBOR = OFF, Low-Power BOR is disabled
  1768                           ;	Low-Voltage Programming Enable
  1769                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1770  8008                     	org	32776
  1771  8008  1DFF               	dw	7679

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      4       4
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_enter_number_finish
    _enter_number_finish->___awdiv
    _enter_number_added->___awdiv
    _display_7segment->_Data_pulse_with_0
    _display_7segment->_Data_pulse_with_1
    _Data_pulse_with_1->_clk_pulse
    _Data_pulse_with_0->_clk_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    8774
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                 _enter_number_added
                _enter_number_finish
 ---------------------------------------------------------------------------------
 (1) _enter_number_finish                                  3     1      2    3543
                                              9 COMMON     3     1      2
                            ___awdiv (ARG)
                   _display_7segment
                        _latch_pulse
 ---------------------------------------------------------------------------------
 (2) _latch_pulse                                          4     2      2     123
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _enter_number_added                                   2     0      2    3847
                                              9 COMMON     2     0      2
                            ___awdiv (ARG)
                            ___awmod (ARG)
                          _clk_pulse
                   _display_7segment
 ---------------------------------------------------------------------------------
 (2) _display_7segment                                     2     0      2    3322
                                              6 COMMON     2     0      2
                  _Data_pulse_with_0
                  _Data_pulse_with_1
 ---------------------------------------------------------------------------------
 (3) _Data_pulse_with_1                                    2     0      2    1285
                                              4 COMMON     2     0      2
                          _clk_pulse
 ---------------------------------------------------------------------------------
 (3) _Data_pulse_with_0                                    2     0      2    1665
                                              4 COMMON     2     0      2
                          _clk_pulse
 ---------------------------------------------------------------------------------
 (4) _clk_pulse                                            4     2      2     275
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     600
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _enter_number_added
     ___awdiv (ARG)
     ___awmod (ARG)
     _clk_pulse (ARG)
     _display_7segment (ARG)
       _Data_pulse_with_0
         _clk_pulse
       _Data_pulse_with_1
         _clk_pulse
   _enter_number_finish
     ___awdiv (ARG)
     _display_7segment (ARG)
     _latch_pulse (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      4       4       6        5.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Mar 17 14:45:24 2022

                          l9 057B                           l10 0574                           l12 0585  
                         l21 055F                           l15 0592                           l24 0555  
                         l40 07FC                           l16 058B                           l18 059C  
                         l52 05B3                           l61 06D3                           l46 07FC  
                         l49 056E                 ___awdiv@sign 0076                          l282 0665  
                        l295 0606                          l801 07C1                          l803 07D0  
                        l811 0560                          l821 060C                          l805 07D7  
                        l813 059D                          l901 066E                          l831 0620  
                        l823 0611                          l807 07DF                          l815 05AB  
                        l841 0634                          l833 0622                          l825 0613  
                        l817 0607                          l761 0558                          l809 07E6  
                        l921 06CF                          l913 0677                          l851 0651  
                        l843 0638                          l835 0628                          l827 0617  
                        l819 0608                          l755 056F                          l763 054C  
                        l771 06D5                          l915 06C2                          l907 0673  
                        l845 0647                          l837 062B                          l853 0657  
                        l829 061C                          l861 05B4                          l757 0577  
                        l765 054E                          l781 070D                          l773 06DB  
                        l917 06C7                          l855 065C                          l847 064B  
                        l839 0630                          l871 05C4                          l863 05B5  
                        l759 0556                          l791 0772                          l783 0731  
                        l775 06EA                          l767 0586                          l919 06CB  
                        l857 0661                          l849 064C                          l881 05DB  
                        l873 05C9                          l865 05B9                          l793 0779  
                        l785 0738                          l777 06F0                          l769 058E  
                        l883 05DF                          l875 05CF                          l891 05F8  
                        l867 05BE                          l795 079D                          l787 074E  
                        l779 0706                          l893 05FD                          l885 05E9  
                        l877 05D2                          l869 05C0                          l797 07A4  
                        l789 0755                          l895 0602                          l887 05ED  
                        l879 05D7                          l799 07BA                          l889 05F2  
                        l899 0666                          u400 0755                          u401 0754  
                        u410 0779                          u411 0778                          u500 0638  
                        u340 0585                          u420 07A4                          u501 0637  
                        u341 0584                          u421 07A3                          u430 07C1  
                        u350 059C                          u431 07C0                          u351 059B  
                        u520 0647                          u600 05DF                          u440 07D7  
                        u360 06DB                          u521 0646                          u601 05DE  
                        u345 0581                          u441 07D6                          u361 06DA  
                        u610 05E9                          u450 07E6                          u370 06F0  
                        u515 0639                          u611 05E8                          u451 07E5  
                        u371 06EF                          u355 0598                          u540 0657  
                        u460 060C                          u380 070D                          u541 0656  
                        u525 0643                          u461 060B                          u381 070C  
                        u550 065C                          u470 0617                          u630 05F8  
                        u390 0738                          u551 065B                          u535 064D  
                        u471 0616                          u631 05F7                          u615 05E5  
                        u391 0737                          u480 0628                          u640 05FD  
                        u560 05B9                          u481 0627                          u641 05FC  
                        u625 05EE                          u561 05B8                          u570 05C4  
                        u650 06CB                          u571 05C3                          u651 06CA  
                        u580 05CF                          u660 06D3                          u581 05CE  
                        u661 06D2                          u495 062C                          u595 05D3  
                        u677 05AE                 ___awmod@sign 0076                          wreg 0009  
               ?_latch_pulse 0070                         _main 0666                         btemp 007E  
                       start 0002                        ?_main 0070              __end_of___awdiv 0666  
            __end_of___awmod 0607              ___awdiv@divisor 0070              ___awdiv@counter 0075  
                      main@a 0020                        main@b 0022                        status 0003  
                      wtemp0 007E              __initialization 07FD                 __end_of_main 06D5  
                     ??_main 007C             ___awdiv@dividend 0072          enter_number_added@n 0079  
                  ??___awdiv 0074                    ??___awmod 0074           Data_pulse_with_0@n 0074  
         Data_pulse_with_1@n 0074             ___awdiv@quotient 0077              ___awmod@divisor 0070  
            ___awmod@counter 0075           _enter_number_added 0560          ?_enter_number_added 0079  
    __end_of__initialization 07FD            ?_display_7segment 0076           ??_display_7segment 0078  
             __pcstackCOMMON 0070         ??_enter_number_added 007B                 latch_pulse@i 0072  
               latch_pulse@n 0070                   __pmaintext 0666            display_7segment@n 0076  
          __end_of_clk_pulse 0586                      ___awdiv 0607                      ___awmod 05B4  
       enter_number_finish@n 0079                      __ptext1 059D                      __ptext2 0586  
                    __ptext3 0560                      __ptext4 06D5                      __ptext5 0556  
                    __ptext6 054C                      __ptext7 056F                      __ptext8 05B4  
                    __ptext9 0607             ___awmod@dividend 0072         end_of_initialization 07FD  
        _enter_number_finish 059D                   clk_pulse@i 0072                   clk_pulse@n 0070  
       ?_enter_number_finish 0079                    _TRISCbits 008E        ??_enter_number_finish 007B  
        start_initialization 07FD                ??_latch_pulse 0072                    ___latbits 0002  
              __pcstackBANK0 0020            _Data_pulse_with_0 054C            _Data_pulse_with_1 0556  
         ?_Data_pulse_with_0 0074           ?_Data_pulse_with_1 0074          ??_Data_pulse_with_0 0076  
        ??_Data_pulse_with_1 0076          __end_of_latch_pulse 059D                     ?___awdiv 0070  
                   ?___awmod 0070                    _clk_pulse 056F    __end_of_Data_pulse_with_0 0556  
  __end_of_Data_pulse_with_1 0560                     _LATCbits 010E                   ?_clk_pulse 0070  
           _display_7segment 06D5                  _latch_pulse 0586                  ??_clk_pulse 0072  
__end_of_enter_number_finish 05B4   __end_of_enter_number_added 056F     __end_of_display_7segment 07FD  
